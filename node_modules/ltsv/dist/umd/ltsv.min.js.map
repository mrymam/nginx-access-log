{"version":3,"file":"ltsv.min.js","sources":["../../src/validator.ts","../../src/formatter.ts","../../src/parser.ts","../../src/whatwg_stream.ts"],"sourcesContent":["/**\n * validate label\n *\n * @param label\n */\nexport function isValidLabel(label: string): boolean {\n  return /^[0-9A-Za-z_.-]+$/.test(label);\n}\n\n/**\n * validate for value\n *\n * @param value\n */\nexport function isValidValue(value: string): boolean {\n  // eslint-disable-next-line no-control-regex\n  return /^[\\x01-\\x08\\x0B\\x0C\\x0E-\\xFF]*$/.test(value);\n}\n","import { isValidLabel, isValidValue } from './validator';\n\nimport { LtsvRecord } from './types';\n\nexport type StringifyOptions = {\n  strict: boolean;\n};\n\n/**\n * convert to record string from object\n *\n * @private\n * @param record\n * @param strict\n * @throws {TypeError}\n */\nfunction objectToRecord(record: LtsvRecord, strict: boolean): string {\n  if (record === null || typeof record !== 'object') {\n    throw new TypeError('record must be an Object');\n  }\n\n  const keys = Object.keys(record);\n  const fields = [];\n\n  for (let i = 0, len = keys.length; i < len; ++i) {\n    const label = keys[i];\n    const value = record[keys[i]];\n\n    if (strict && !isValidLabel(label)) {\n      throw new SyntaxError(`unexpected character in label: \"${label}\"`);\n    }\n\n    if (strict && !isValidValue(value)) {\n      throw new SyntaxError(`unexpected character in value: \"${value}\"`);\n    }\n\n    fields[i] = label + ':' + value;\n  }\n\n  return fields.join('\\t');\n}\n\n/**\n * convert to LTSV string from object or array\n *\n * @private\n * @param data\n * @param strict\n * @throws {TypeError}\n */\nfunction baseFormat(data: LtsvRecord | LtsvRecord[], strict: boolean): string {\n  const isArray = Array.isArray(data);\n\n  if (!isArray && (data === null || typeof data !== 'object')) {\n    throw new TypeError('data must be an Object or Array');\n  }\n\n  const records: string[] = [];\n\n  if (isArray) {\n    for (let i = 0, len = data.length; i < len; ++i) {\n      records[i] = objectToRecord((data as LtsvRecord[])[i], strict);\n    }\n  } else {\n    records.push(objectToRecord(data as LtsvRecord, strict));\n  }\n\n  return records.join('\\n');\n}\n\n/**\n * convert to LTSV string from object or array\n *\n * @param data\n * @see baseFormat\n */\nexport function format(data: LtsvRecord | LtsvRecord[]): string {\n  return baseFormat(data, false);\n}\n\n/**\n * convert to LTSV string from object or array\n *\n * @param data\n * @see baseFormat\n */\nexport function formatStrict(data: LtsvRecord | LtsvRecord[]): string {\n  return baseFormat(data, true);\n}\n\n/**\n * convert to LTSV string from object or array\n *\n * @param data\n * @param options\n * @see baseFormat\n */\nexport function stringify(\n  data: LtsvRecord | LtsvRecord[],\n  options: StringifyOptions = { strict: false }\n): string {\n  const { strict = false } = options;\n\n  return baseFormat(data, strict);\n}\n","import { isValidLabel, isValidValue } from './validator';\n\nimport { LtsvRecord } from './types';\n\ntype LtsvField = {\n  label: string;\n  value: string;\n};\n\n/**\n * split to label and value from field\n *\n * @private\n * @param chunk\n * @param strict\n * @throws {SyntaxError}\n */\nfunction splitField(chunk: string, strict: boolean): LtsvField {\n  const field = String(chunk);\n  const index = field.indexOf(':');\n\n  if (index === -1) {\n    throw new SyntaxError(`field separator is not found: \"${field}\"`);\n  }\n\n  const label = field.slice(0, index);\n  const value = field.slice(index + 1);\n\n  if (strict && !isValidLabel(label)) {\n    throw new SyntaxError(`unexpected character in label: \"${label}\"`);\n  }\n\n  if (strict && !isValidValue(value)) {\n    throw new SyntaxError(`unexpected character in value: \"${value}\"`);\n  }\n\n  return {\n    label,\n    value\n  };\n}\n\n/**\n * parse LTSV record\n *\n * @private\n * @param line\n * @param strict\n */\nfunction baseParseLine(line: string, strict: boolean): LtsvRecord {\n  const fields = String(line)\n    .replace(/(?:\\r?\\n)+$/, '')\n    .split('\\t');\n\n  const record: LtsvRecord = {};\n\n  for (let i = 0, len = fields.length; i < len; ++i) {\n    const { label, value } = splitField(fields[i], strict);\n\n    record[label] = value;\n  }\n\n  return record;\n}\n\n/**\n * parse LTSV text\n *\n * @private\n * @param text\n * @param strict\n */\nfunction baseParse(text: string, strict: boolean): LtsvRecord[] {\n  const lines = String(text)\n    .replace(/(?:\\r?\\n)+$/, '')\n    .split(/\\r?\\n/);\n\n  const records: LtsvRecord[] = [];\n\n  for (let i = 0, len = lines.length; i < len; ++i) {\n    records[i] = baseParseLine(lines[i], strict);\n  }\n\n  return records;\n}\n\n/**\n * parse LTSV text\n *\n * @param text\n */\nexport function parse(text: string): LtsvRecord[] {\n  return baseParse(text, false);\n}\n\n/**\n * parse LTSV record\n *\n * @param line\n */\nexport function parseLine(line: string): LtsvRecord {\n  return baseParseLine(line, false);\n}\n\n/**\n * parse LTSV text\n *\n * @param text\n */\nexport function parseStrict(text: string): LtsvRecord[] {\n  return baseParse(text, true);\n}\n\n/**\n * parse LTSV record\n *\n * @param line\n */\nexport function parseLineStrict(line: string): LtsvRecord {\n  return baseParseLine(line, true);\n}\n","import { parseLine, parseLineStrict } from './parser';\nimport { LtsvRecord } from './types';\n\nexport type LtsvToJsonStreamOptions = {\n  objectMode?: boolean;\n  strict?: boolean;\n};\n\ntype LtsvToJsonStreamInstance = {\n  buffer: string;\n  objectMode: boolean;\n  parse: typeof parseLine | typeof parseLineStrict;\n};\n\n/**\n * transform and push to stream\n *\n * @param text\n * @param isFlush\n * @param controller\n */\nfunction push(\n  this: LtsvToJsonStreamInstance,\n  text: string,\n  isFlush: boolean,\n  controller: TransformStreamDefaultController<string | LtsvRecord>\n): void {\n  let next = 0;\n  let last = 0;\n  let error: Error | null = null;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let index = text.indexOf('\\n', next);\n\n    if (index === -1) {\n      if (isFlush && next < text.length) {\n        // NOTE: subtract 1 from text.length,\n        // NOTE: because add 1 to index when slice.\n        index = text.length - 1;\n      } else {\n        break;\n      }\n    }\n\n    // NOTE: include `\\n`.\n    // NOTE: foo:foo\\tbar:bar\\nfoo:foo\\tbar:bar\\n\n    // NOTE: -----------------|\n    const line = text.slice(next, index + 1);\n\n    let record: LtsvRecord = {};\n\n    try {\n      record = this.parse(line);\n    } catch (e) {\n      error = e;\n    }\n\n    if (error) {\n      break;\n    }\n\n    controller.enqueue(this.objectMode ? record : JSON.stringify(record));\n\n    // NOTE: save next start index.\n    // NOTE: foo:foo\\tbar:bar\\nfoo:foo\\tbar:bar\\n\n    // NOTE: ------------------|\n    last = next = index + 1;\n  }\n\n  this.buffer = text.slice(last);\n\n  if (error) {\n    controller.error(error);\n  }\n}\n\n/**\n * LTSV to JSON transform stream\n *\n * @param options\n */\nexport function LtsvToJsonStream(\n  options: LtsvToJsonStreamOptions = {\n    objectMode: false,\n    strict: false\n  }\n): Transformer<string, string | LtsvRecord> {\n  const { objectMode = false, strict = false } = options;\n\n  const instance: LtsvToJsonStreamInstance = {\n    buffer: '',\n    objectMode,\n    parse: strict ? parseLineStrict : parseLine\n  };\n\n  return {\n    /**\n     * transform implementation.\n     *\n     * @param chunk\n     * @param controller\n     */\n    transform(\n      chunk: string,\n      controller: TransformStreamDefaultController<string | LtsvRecord>\n    ): void {\n      push.call(instance, instance.buffer + chunk, false, controller);\n    },\n    /**\n     * flush implementation.\n     *\n     * @param controller\n     */\n    flush(\n      controller: TransformStreamDefaultController<string | LtsvRecord>\n    ): void {\n      push.call(instance, instance.buffer, true, controller);\n    }\n  };\n}\n\nexport function createLtsvToJsonStream(\n  options?: LtsvToJsonStreamOptions\n): TransformStream<string, string | LtsvRecord> {\n  return new TransformStream(LtsvToJsonStream(options));\n}\n"],"names":["isValidLabel","label","test","isValidValue","value","objectToRecord","record","strict","TypeError","keys","Object","fields","i","len","length","SyntaxError","join","baseFormat","data","isArray","Array","records","push","splitField","chunk","field","String","index","indexOf","slice","baseParseLine","line","replace","split","_a","baseParse","text","lines","parseLine","parseLineStrict","isFlush","controller","next","last","error","this","parse","e","enqueue","objectMode","JSON","stringify","buffer","LtsvToJsonStream","options","_b","instance","transform","call","flush","TransformStream"],"mappings":"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"}